name: Process Deployment Queue

on:
  schedule:
    - cron: "*/1 * * * *"  # Runs every minute (for testing)
  workflow_dispatch:  # Allows manual triggering

jobs:
  process-queue:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Git user identity
      - name: Set up Git user
        run: |
          git config --global user.name "Ysoll"
          git config --global user.email "voda.cristian94@gmail.com"

      # Step 3: Read queue and get the first RC branch
      - name: Read queue and get the first RC branch
        id: get_queue
        run: |
          if [ ! -s rc_queue.json ]; then
            echo "No branches in the queue"
            exit 0
          fi
          queue_branch=$(jq -r '.queue[0]' rc_queue.json)
          echo "Picked branch: $queue_branch"
          echo "::set-output name=branch::$queue_branch"

# Step to sync the RC branch with master
- name: Sync RC branch with master
  run: |
    branch="${{ steps.get_queue.outputs.branch }}"
    
    # Fetch all remote branches
    git fetch origin

    # Check if the branch exists
    if git show-ref --verify --quiet refs/heads/$branch; then
      echo "Branch $branch exists, checking it out."
      git checkout $branch
    else
      echo "Branch $branch does not exist, creating it."
      git checkout -b $branch
      git push origin $branch
    fi
    
    # Merge master into the branch
    git fetch origin master
    git merge origin/master --no-edit
    if [ $? -ne 0 ]; then
      echo "Merge conflict, aborting."
      exit 1
    fi


      # Step 5: Create a release branch
      - name: Create release branch
        id: create_release_branch
        run: |
          branch="${{ steps.get_queue.outputs.branch }}"
          date=$(date +'%Y%m%d')
          release_branch="release/fast/$date-$branch"
          git checkout -b $release_branch
          git push origin $release_branch
          echo "::set-output name=release_branch::$release_branch"

      # Step 6: Trigger Jenkins Deployment using the release branch
      - name: Trigger Jenkins Job
        uses: ./github/actions/jenkins-action  # Use your custom action here
        with:
          url: 'http://localhost:8080/job/JenkinsTest/buildWithParameters'
          username: ${{ secrets.JENKINS_USER }}
          password: ${{ secrets.JENKINS_PASSWORD }}
          parameters: BRANCH_NAME=${{ steps.create_release_branch.outputs.release_branch }}

      # Step 7: Remove processed branch from the queue
      - name: Remove branch from queue
        run: |
          branch="${{ steps.get_queue.outputs.branch }}"
          jq 'del(.queue[0])' rc_queue.json > temp.json && mv temp.json rc_queue.json
          git add rc_queue.json
          git commit -m "Removed $branch from queue"
          git push origin main
